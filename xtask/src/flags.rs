use crate::arch::Arch;

xflags::xflags! {
    src "./src/flags.rs"

    cmd xtask {
        default cmd help {
            optional -h, --h
        }

        cmd build {
            optional -a, --arch arch: Arch
            optional --release
        }

        cmd run {
            optional -a, --arch arch: Arch
            optional --release
            optional --debug
        }
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Xtask {
    pub subcommand: XtaskCmd,
}

#[derive(Debug)]
pub enum XtaskCmd {
    Help(Help),
    Build(Build),
    Run(Run),
}

#[derive(Debug)]
pub struct Help {
    pub h: bool,
}

#[derive(Debug)]
pub struct Build {
    pub arch: Option<Arch>,
    pub release: bool,
}

#[derive(Debug)]
pub struct Run {
    pub arch: Option<Arch>,
    pub release: bool,
    pub debug: bool,
}

impl Xtask {
    pub const HELP: &'static str = Self::HELP_;

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
